----------
TUTORIAL 1
----------

This is an introduction to bare-metal programming on Raspberry Pi using
C language. This module shows how a software can be written in a modular
(and reusable) code structure.

---------
Objective
---------

1- To understand how a GPIO pin interfacing can be done
2- To review modular coding style

----------
Background
----------

This module shows how the board can be connected to external (off-board) LED
and switch. The example program will blink an LED that is connected to GPIO2
pin (active low) whenever a switch at GPIO3 pin (active low) is pushed.

When working towards developing larger and more complex code, it is nice to
have reusable codes in appropriately named functions (modular programming).
Consequently, the modularized codes can be generalized and 'packed' into a
'library' module that can be used in the subsequent tutorials.

--------
Contents
--------

All source codes are placed in the 'src' folder. The list of objects files
required by the application must be listed in the makefile (OBJLST variable)
for them to be included in the build.

------------------
ThingsToThinkAbout
------------------

A GPIO configured as input pin can be further configured to have event (signal
changes) detection mechanisms. Find out why this is actually a very useful
feature to have. (Hint: How long are you willing to push - and hold - that
button at a pedestrian crossing or an elevator? :p)

---------
Challenge
---------

See you if can extend the GPIO library module to include input event detection.
Write an example application to test the functions you created.
