-----------
TUTORIAL 03
-----------

This is an introduction to bare-metal programming on Raspberry Pi using
C language. This module shows how to use the interrupt facility on BCM2835. It
also shows a rewrite of the timer/gpio module in order to utilize interrupt.

---------
Objective
---------

1- To explore interrupt facilities available on BCM2835
2- To understand how an interrupt can be used for event triggers (timer)
3- To understand the need for low-level access for interrupt configuration

----------
Background
----------

Interrupts are very useful to have - many applications appreciate having the
possibility of event-based implementation.

Most of the time, configuring interrupt facilities can only be done using
assembly. Notice that the code in 'boot.s' is significantly larger, and
different from the previous tutorials.

--------
Contents
--------

All codes related to interrupt configuration are in 'main.c'. The things that
are specific to GPIO and timer can be found in respective source files in
tZZ_modules/src folder.

------------------
ThingsToThinkAbout
------------------

An interrupt facility allows the concept of event-based processing. Looking
at the BCM2835 controller, find all the hardware events that can be uniquely
identified. How can a software event be introduced to  the system?

---------
Challenge
---------

Try to write a code to generate waveforms at different frequencies on three
separate GPIO pins. This is to show a simple form of multi-tasking (i.e. static
scheduling). Verify the generated signal on an oscilloscope.
